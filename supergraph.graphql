schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
}

directive @is_admin on FIELD

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

directive @lowercase on FIELD

type Account
  @join__type(graph: ACCOUNT, key: "id")
{
  id: ID!
  name: String!
  desc: String!
  roles: [String!]!
  permissions: [String!]!
}

type Content
  @join__type(graph: AI, key: "id")
  @join__type(graph: CONTENT, key: "id")
  @join__type(graph: RELATION, key: "id")
  @join__type(graph: TRANSFORM, key: "id")
{
  id: ID!
  tag: [String!]! @join__field(graph: AI)
  name: String @join__field(graph: CONTENT)
  reviewCount: Int! @join__field(graph: CONTENT)
  relationContent: [Content!]! @join__field(graph: RELATION)
  cropUrl: String @join__field(graph: TRANSFORM)
}

scalar join__FieldSet

enum join__Graph {
  ACCOUNT @join__graph(name: "account", url: "http://localhost:4005/")
  AI @join__graph(name: "ai", url: "http://localhost:4003/")
  CONTENT @join__graph(name: "content", url: "http://localhost:4001/")
  RELATION @join__graph(name: "relation", url: "http://localhost:4004/")
  TRANSFORM @join__graph(name: "transform", url: "http://localhost:4002/")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query
  @join__type(graph: ACCOUNT)
  @join__type(graph: AI)
  @join__type(graph: CONTENT)
  @join__type(graph: RELATION)
  @join__type(graph: TRANSFORM)
{
  account(id: ID!): Account! @join__field(graph: ACCOUNT)
  accounts: [Account!]! @join__field(graph: ACCOUNT)
  findTags: [String!]! @join__field(graph: AI)
  findContentById: Content! @join__field(graph: CONTENT)
}