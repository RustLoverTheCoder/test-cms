schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.5", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/authenticated/v0.1", for: SECURITY)
{
  query: Query
  mutation: Mutation
}

directive @authenticated on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

directive @gravity on FIELD

directive @join__directive(graphs: [join__Graph!], name: String!, args: join__DirectiveArguments) repeatable on SCHEMA | OBJECT | INTERFACE | FIELD_DEFINITION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean, overrideLabel: String, contextArguments: [join__ContextArgument!]) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

directive @nth(index: Int!) on FIELD

directive @transform(width: Int, height: Int) on FIELD

directive @watermark(content: String!) on FIELD

type Author
  @join__type(graph: CONTENT)
{
  id: ID
  name: String
  slug: String
  image: String
  posts(offset: Int, limit: Int): [Post]
}

input AuthorInput
  @join__type(graph: CONTENT)
{
  name: String
  slug: String
  image: String
}

input FilterType
  @join__type(graph: CONTENT)
{
  must: [MustInput]
}

input join__ContextArgument {
  name: String!
  type: String!
  context: String!
  selection: join__FieldValue!
}

scalar join__DirectiveArguments

scalar join__FieldSet

scalar join__FieldValue

enum join__Graph {
  CONTENT @join__graph(name: "content", url: "http://localhost:4006/")
}

input LikeType
  @join__type(graph: CONTENT)
{
  value: String
  threshold: Float
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

input MatchType
  @join__type(graph: CONTENT)
{
  value: String
}

input MustInput
  @join__type(graph: CONTENT)
{
  key: String
  match: MatchType
  like: LikeType
}

type Mutation
  @join__type(graph: CONTENT)
{
  create_post(input: PostInput): Post
  create_author(input: AuthorInput): Author
}

type Post
  @join__type(graph: CONTENT)
  @authenticated
{
  id: ID
  title: String
  slug: String
  author: Author
}

input PostInput
  @join__type(graph: CONTENT)
{
  title: String
  slug: String
  author: ID
}

type Query
  @join__type(graph: CONTENT)
{
  posts(offset: Int, limit: Int): [Post]
  find_post_by_id(id: ID): Post
  authors(offset: Int, limit: Int): [Author]
  find_author_by_id(id: ID): Author
  searchCollectionPoints(input: SearchInput): [String]
}

input SearchInput
  @join__type(graph: CONTENT)
{
  filter: FilterType
  limit: Int
}